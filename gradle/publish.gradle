apply plugin: 'maven-publish'
apply plugin: 'signing'

def isSnapshot = false
if(version ==~ /^\d+\.\d+\.\d+$/) {
  isSnapshot = false
} else if (version ==~ /^\d+\.\d+\.\d+-SNAPSHOT$/) {
  isSnapshot = true
} else {
  if ((System.getenv("IS_RELEASE") ?: "").equalsIgnoreCase("true")) {
    throw new RuntimeException("Invalid version pattern: $version")
  }
}

publishing {
  publications {
    mavenJava(MavenPublication) {
      artifactId = archivesBaseName
      pom {
        name = archivesBaseName
        url = 'https://github.com/orekyuu/Nilou'
        description = project.description
        licenses {
          license {
            name = 'MIT License'
            url = 'https://opensource.org/license/mit/'
          }
        }
        developers {
          developer {
            id = 'orekyuu'
            name = 'Yutaro Kanagawa'
            email = 'orekyuu@gmail.com'
          }
        }
        scm {
          connection = 'scm:git:git@github.com:orekyuu/Nilou.git'
          developerConnection = 'scm:git:git@github.com:orekyuu/Nilou.git'
          url = 'https://github.com/orekyuu/Nilou'
        }
      }
      from components.java
    }
  }
  repositories {
    maven {
      name = "OSSRH"
      if (isSnapshot) {
        url = "https://s01.oss.sonatype.org/content/repositories/snapshots/"
      } else {
        url = "https://s01.oss.sonatype.org/service/local/staging/deploy/maven2/"
      }
      credentials {
        username = System.getenv("MAVEN_USERNAME")
        password = System.getenv("MAVEN_PASSWORD")
      }
    }
  }
}

java {
  withJavadocJar()
  withSourcesJar()
}

javadoc {
  if (JavaVersion.current().isJava9Compatible()) {
    options.addBooleanOption('html5', true)
  }
  options.addStringOption('Xdoclint:none')
}

signing {
  def keyId = System.getenv("SIGNING_KEY_ID")
  def key = System.getenv("SIGNING_KEY")
  if (keyId && key) {
    def pass = System.getenv("SIGNING_PASS")
    useInMemoryPgpKeys(keyId, key, pass)
    sign publishing.publications.mavenJava
  }
}